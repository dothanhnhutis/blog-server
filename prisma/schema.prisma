generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role Model
enum ContactTag {
  NORMAL
  JUNK
  ARCHIVE
  TRASH
}

model Contact {
  id          String     @id @default(cuid())
  requestId   String
  name        String
  email       String     @default("")
  phone       String
  isReaded    Boolean    @default(false)
  contactTag  ContactTag @default(NORMAL)
  productName String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt

  @@index([requestId])
}

model Image {
  id        String   @id
  public_id String
  width     Int
  height    Int
  tags      String[]
  url       String
  uploadBy  User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

// Role Model
enum Role {
  ADMIN
  MANAGER
  SALER
  // Accountance
  // ResearchAndDevelopment
  // Paperworker
  WRITER
  CUSTOMER
}

// User Model
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      Role      @default(CUSTOMER)
  isActive  Boolean   @default(true)
  name      String
  bio       String    @default("")
  phone     String    @default("")
  avatarUrl String?
  address   String    @default("")
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  images    Image[]

  @@index([email, name, phone])
}

// Tag Model
model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  post      Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, slug])
}

// Post Model
model Post {
  id          String   @id @default(cuid())
  title       String
  image       String
  slug        String   @unique
  contentJson String
  contentText String
  contentHTML String
  tag         Tag      @relation(fields: [tagId], references: [id])
  tagId       String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  isActive    Boolean  @default(true)
  publishAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([title, slug, tagId, authorId])
}

// Product Model
model Product {
  id          String   @id @default(cuid())
  images      String[]
  video       String?
  productName String
  slug        String   @unique
  code        String?  @unique
  description String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  benefits    String[]
  ingredients String[]
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  contentJson String
  contentHTML String
  contentText String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Category Model
model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name, slug])
}

// LogOrder Model
// model LogOrder {
//   id       String   @id @default(cuid())
//   data     Json
//   orderId  String
//   tags     String[]
//   order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId   String
//   createdAt DateTime @default(now())
// }

// enum TypeBooking {
//   PACKAGING
//   CHEMICALS
// }

// enum StatusEnum {
//   CREATE
//   SHIPPING
//   RECEIVED
// }

// model Order {
//   id               String      @id @default(cuid())
//   name             String
//   type             TypeBooking
//   unit             UnitBooking
//   amount           BigInt
//   status           StatusEnum
//   log              LogOrder[]
//   expectDeliveryAt DateTime
//   createdAt         DateTime    @default(now())
//   updatedAt         DateTime    @updatedAt
// }

// model Inventory {
//   id String @id
// }

// enum Unit {
//   GRAMS
//   MILLILITER
//   BARRELS
// }

// model Ingredient {
//   id       String    @id @default(cuid())
//   name     String
//   unit     Unit
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   Formula  Formula[]
// }

// model Formula {
//   id        String   @id @default(cuid())
//   name      String
//   product   Product? @relation(fields: [productId], references: [id])
//   productId String?

//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }

// Role
// Admin All
// Manager blog tag order stock product chemical
// Accountance stock order product
// Researcher order product write-chemical
// Paperworker read-chemical product
// Writer blog tag

// model Otp {
//   id       String   @id @default(cuid())
//   code     String
//   count    Int      @default(0)
//   verified Boolean  @default(false)
//   email    String
//   expireAt DateTime
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([code, email, verified, count])
// }
